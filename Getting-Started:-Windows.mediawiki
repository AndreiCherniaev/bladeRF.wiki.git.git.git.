= Using an Installer =
* [http://www.scan-ne.net/bladerf/bladerfwin7.html  bladeRF, Windows 7, and SDR-Radio] (Courtesy of [http://nuand.com/forums/viewtopic.php?f=9&t=3526 Scott] from [http://www.scan-ne.net Scan New England])
* [http://nuand.com/forums/viewtopic.php?f=5&t=3498 bladeRF, Windows 8, and SDR-Console] (Thanks to Drew)

= Building from source =
== Tools and Dependencies ==
=== Installing git for Windows ===
# Download and install [http://msysgit.github.io/ msysgit]. If you plan to submit patches to the bladeRF project, please select the _Checkout as-is, commit Unix-style line endings_ option in the installer.
# Download and install [http://code.google.com/p/tortoisegit/wiki/Download tortoisegit].

For more information, see the [https://github.com/msysgit/msysgit/wiki/InstallMSysGit mysysgit] and [http://code.google.com/p/tortoisegit/wiki/SetupHowTo tortoisegit] wiki pages about their install procedures.

=== Installing Visual Studio Express 2013 for Windows Desktop ===
# Download [http://www.microsoft.com/visualstudio/eng/products/visual-studio-express-for-windows-desktop Visual Studio Express 2013 for Windows Desktop] from Microsoft.
# Follow the installation instructions, including any post-install updates.

''Note:'' Visual Studio Express 2013 for Windows Desktop corresponds to Visual Studio 12 in CMake.

=== Installing libusbx ===

# Download the latest Windows binary release of libusbx, which also include development headers: https://sourceforge.net/projects/libusbx/files/releases/1.0.18/binaries/ (Note: you may need to download and install [http://www.7-zip.org/ 7-zip from 7-zip.org].)
# Extract the contents to a location of your choice. Make note of this location so that you can later provide it to CMake. The default configuration assumes that files will be in '''C:/Program Files (x86)/libusbx-1.0.16''' If you wish to change the directory, use the -DLIBUSB_PATH= option for cmake.
# Get the device driver installer (zadig): http://sourceforge.net/projects/libwdi/files/zadig/
# Open Zadig. 
# Go to Device->Create New Device. 
# Type a device name (i.e., "bladeRF") in the text box. In the driver spinbox, select libusbK. Specify the VID/PID (''1d50''/''6066'') in the USB ID fields.
# Plug the device into the computer and open Device Manager.  A new device called ''bladeRF'' should show up with a yellow bang next to it in device manager.
# Right-click on the ''bladeRF'' entry and select "Update Driver Software...".  
## Choose "Browse my computer for driver software"
## "Let me pick from a list of device drivers on my computer".  
## Click "Have Disk..." and point it to the location that Zadig installed the driver to (C:\usb_driver).  ## Select "bladeRF" and continue through the wizard.
# Device Manager should now show ''bladeRF'' under ''libusbK USB Devices''.

=== Installing pthreads-win32 ===
The pthreads library is required to build a few tests and utilities. A few steps are required to install this pthreads implementation. See [http://www.sourceware.org/pthreads-win32/ the pthreads-win32 website] for more information.

# Download the latest release. Currently this is [ftp://sourceware.org/pub/pthreads-win32/pthreads-w32-2-9-1-release.zip the pthreads-win32 website].
# Extract the contents of the release zip.
# Copy the contents of the _Pre-built.2_ directory to _C:\Program Files (x86)\pthreads-win32

=== Installing CMake ===
Download and install CMake for Windows: 
http://www.cmake.org/cmake/resources/software.html

== Building with CMake and VS2012 ==

=== Configuring with CMake ===
# Run the CMake GUI utility. 
# Under "Where is the source code", browse to '''some_dir/bladeRF/host'''. 
# Create a new directory, '''some_dir/bladeRF/host/build'''. 
# Under "Where to build the binaries", browse to the newly created /bladeRF/host/build. Click the Configure button. 
# Select your appropriate version of Visual Studio.  Current development is done using "Visual Studio 11" or "Visual Studio 11 Win64" as the generator (Visual Studio 2012).  Select "Use default native compilers", then click "Finish". 
# If the configuration fails, double check the values for ''LIBUSB_PATH'' and ''LIBPTHREADSWIN32_PATH'', and re-run the configuration.
# Click on the Generate button.
# A visual studio solution should now be available, '''build/host/bladeRF.sln'''

=== Compiling ===
# CMake has created a ''bladeRF.sln'' file.  Open Visual Studio, and open this file.
# The following projects should show up in the Solution Explorer.
## ALL_BUILD
## bladeRF-cli
## INSTALL
## libbladerf_shared
## libbladerf_test_async
## libbladerf_test_repeater
## uninstall
## win_postbuild
## ZERO_CHECK
# Run <code>Build -> Build Solution</code>
# After the build completes, you should see an '''host\output''' directory in the build directory, containing either a Debug or Release subdirectory. These directories will contain generated executables, libraries, and will contain copies of the required DLLs.

== Verifying basic functionality ==
Open up a '''cmd.exe''' window and navigate to the output directory associated with your build:

<pre>
C:\Users\jon\Documents\projects\bladeRF\host\build\host\output\Debug>dir
 Volume in drive C is Windows7_OS
 Volume Serial Number is D632-7BC2

 Directory of C:\Users\jon\Documents\projects\bladeRF\host\build\host\output\Debug

10/19/2013  05:36 PM    <DIR>          .
10/19/2013  05:36 PM    <DIR>          ..
10/19/2013  05:36 PM           122,880 bladeRF-cli.exe
10/19/2013  05:36 PM           506,340 bladeRF-cli.ilk
10/19/2013  05:36 PM           921,600 bladerf-cli.pdb
10/19/2013  05:36 PM           139,776 bladeRF.dll
10/19/2013  05:36 PM            10,351 bladeRF.exp
10/19/2013  05:36 PM           388,640 bladeRF.ilk
10/19/2013  05:36 PM            17,676 bladeRF.lib
10/19/2013  05:36 PM           839,680 bladerf.pdb
10/19/2013  05:36 PM            36,352 libbladeRF_test_async.exe
10/19/2013  05:36 PM           273,580 libbladeRF_test_async.ilk
10/19/2013  05:36 PM           552,960 libbladerf_test_async.pdb
10/19/2013  05:36 PM            54,272 libbladeRF_test_repeater.exe
10/19/2013  05:36 PM           330,296 libbladeRF_test_repeater.ilk
10/19/2013  05:36 PM           618,496 libbladerf_test_repeater.pdb
10/19/2013  05:35 PM            92,160 libusb-1.0.dll
10/19/2013  05:35 PM            55,808 pthreadVC2.dll
              16 File(s)      4,960,867 bytes
               2 Dir(s)  80,010,641,408 bytes free

C:\Users\jon\Documents\projects\bladeRF\host\build\host\output\Debug>
</pre>

Note the presence of the libusb-1.0.dll and pthreadVC2.dll in this directory. These are placed here so that the bladeRF-cli and other tests may be run from this directory.

=== Detecting the bladeRF ===
First run <code>bladeRF-cli.exe --help</code> to view the list of command-line functionality.  Run <code>bladeRF-cli.exe -p</code> to probe for attached devices:

<pre>
C:\Users\jon\Documents\projects\bladeRF\host\build\host\output\Debug>bladeRF-cli.exe -p

    Backend:        libusb
    Serial:         f12ce1037830a1b27f3ceeba1f521413
    USB Bus:        3
    USB Address:    3
</pre>

If you do not see your device listed, see the [[Troubleshooting]] wiki page before continuing

=== Viewing additional device information ===
Next, enter the interactive mode and issue the <code>version</code> and <code>info</code> commands to view some additional information about the host software and the attached device.

<pre>
C:\Users\jon\Documents\projects\bladeRF\host\build\host\output\Debug>bladeRF-cli.exe -i
bladeRF> help

... Help text shown here ...

bladeRF> version

  bladeRF-cli version:        0.6.0-git-70f4ed1
  libbladeRF version:         0.7.0-git-70f4ed1

  Firmware version:           1.5.3-git-
  FPGA version:               Unknown (FPGA not loaded)

bladeRF> info

  Serial #:                 f12ce1037830a1b27f3ceeba1f521413                          
  VCTCXO DAC calibration:   0x894e
  FPGA size:                40 KLE
  FPGA loaded:              no
  USB bus:                  3
  USB address:              3
  USB speed:                SuperSpeed
  Backend:                  libusb
  Instance:                 0

bladeRF>
</pre>

'''Note:''' If you see the following message, it is required that you update the firmware before continuing to the next section.  See [[Upgrading-bladeRF-firmware|this wiki page]] for more information on updating your firmware.
<pre>
********************************************************************************
* ENTERING LEGACY MODE, PLEASE UPGRADE TO THE LATEST FIRMWARE BY RUNNING:
* wget http://nuand.com/fx3/latest.img ; bladeRF-cli -f latest.img
********************************************************************************
</pre>

=== Loading the FPGA ===
Support for loading the FPGA from flash automatically is currently supported and undergoing further testing. See the <code>bladeRF-cli --help</code> text for information on how to write an FPGA image to flash for autoloading.

For simplicity, this guide shows how to load the FPGA without storing it into flash for autoloading. (As a result, you'll have to load the FPGA each time the device is reset or plugged in.)

FPGA images can be obtained from [http://www.nuand.com/fpga|the Nuand website] or from a [http://hoopycat.com/bladerf_builds/|nightly build of "bleeding edge" images].

To load an image from the command line.
<pre>
bladeRF-cli -l <path/to/fpga/file>
</pre>

Or to load an image while in interactive mode:
<pre>
bladeRF> load fpga <path/to/fpga/file>
</pre>

You should see LEDs begin blinking after the FPGA load completes. At this point, you're ready to start using your device!

