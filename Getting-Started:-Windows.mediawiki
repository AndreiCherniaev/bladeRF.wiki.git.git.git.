= Using an Installer =
* [https://www.nuand.com/Windows Nuand Windows Installer Guide and Download]
* [http://www.scan-ne.net/bladerf/bladerfwin7.html  bladeRF, Windows 7, and SDR-Radio] (Courtesy of [http://nuand.com/forums/viewtopic.php?f=9&t=3526 Scott] from [http://www.scan-ne.net Scan New England])
* [http://nuand.com/forums/viewtopic.php?f=5&t=3498 bladeRF, Windows 8, and SDR-Console] (Thanks to Drew)

= Building from source =
== Tools and Dependencies ==
=== Installing git for Windows ===
# Download and install [http://msysgit.github.io/ msysgit]. If you plan to submit patches to the bladeRF project, please select the ''Checkout as-is, commit Unix-style line endings'' option in the installer.
# Download and install [http://code.google.com/p/tortoisegit/wiki/Download tortoisegit].

For more information, see the [https://github.com/msysgit/msysgit/wiki/InstallMSysGit mysysgit] and [http://code.google.com/p/tortoisegit/wiki/SetupHowTo tortoisegit] wiki pages about their install procedures.

=== Installing Visual Studio Express 2013 for Windows Desktop ===
# Download [http://www.microsoft.com/visualstudio/eng/products/visual-studio-express-for-windows-desktop Visual Studio Express 2013 for Windows Desktop] from Microsoft.
# Follow the installation instructions, including any post-install updates.

''Note:'' Visual Studio Express 2013 for Windows Desktop corresponds to Visual Studio 12 in CMake.

=== Installing libusb ===

# Download the latest Windows binary release of libusb, which also include development headers [https://sourceforge.net/projects/libusb/files/libusb-1.0/libusb-1.0.19/libusb-1.0.19.7z/download libusb-1.0.19.7z]
## Note: you may need to download and install [http://www.7-zip.org/ 7-zip from 7-zip.org] to open this file.
# Extract the contents to a location of your choice. Make note of this location so that you can later provide it to CMake. The default configuration assumes that files will be in '''C:/Program Files (x86)/libusb-1.0.19''' If you wish to change the directory, use the -DLIBUSB_PATH= option for CMake.
# Get the device driver installer (zadig): http://sourceforge.net/projects/libwdi/files/zadig/
# Open Zadig. 
# Go to Device->Create New Device. 
# Type a device name (i.e., "bladeRF") in the text box. In the driver spinbox, select libusbK. Specify the VID/PID (''1d50''/''6066'') in the USB ID fields.
# Plug the device into the computer and open Device Manager.  A new device called ''bladeRF'' should show up with a yellow bang next to it in device manager.
# Right-click on the ''bladeRF'' entry and select "Update Driver Software...".  
## Choose "Browse my computer for driver software"
## "Let me pick from a list of device drivers on my computer".  
## Click "Have Disk..." and point it to the location that Zadig installed the driver to (C:\usb_driver).  
## Select "bladeRF" and continue through the wizard.
# Device Manager should now show ''bladeRF'' under ''libusbK USB Devices''.

=== Installing pthreads-win32 ===
The pthreads library is required to build libbladeRF and its utilities. A few steps are required to install this pthreads implementation. See [http://www.sourceware.org/pthreads-win32/ the pthreads-win32 website] for more information.

# Download the latest release. Currently this is [ftp://sourceware.org/pub/pthreads-win32/pthreads-w32-2-9-1-release.zip the pthreads-win32 website].
# Extract the contents of the release zip.
# Copy the contents of the <code>Pre-built.2</code> directory to <code>C:\Program Files (x86)\pthreads-win32</code>

=== Installing CMake ===
Download and install CMake for Windows: 
http://www.cmake.org/cmake/resources/software.html

== Building with CMake and Visual Studio 2013 ==

=== Configuring with CMake ===
# Run the CMake GUI utility. 
# Under "Where is the source code", browse to '''preferred_directory/bladeRF/host'''. 
# Create a new directory, '''preferred_directory/bladeRF/host/build'''. 
# Under "Where to build the binaries", browse to the newly created '''preferred_directory/bladeRF/host/build'''. Click the Configure button. 
# Select your appropriate version of Visual Studio.  For Visual Studio 2013, select "Visual Studio 12" or "Visual Studio 12 Win64".  Select "Use default native compilers", then click "Finish". 
# If the configuration fails, double check the values for ''LIBUSB_PATH'' and ''LIBPTHREADSWIN32_PATH'', and re-run the configuration.
# Click on the Generate button.
# A visual studio solution should now be available, '''build/host/bladeRF.sln'''

=== Compiling ===
# CMake has created a ''bladeRF.sln'' file.  Open Visual Studio, and open this file.
# A number of projects should show up in the Solution Explorer, including:
## bladeRF-cli
## libbladerf_shared
# Run <code>Build -> Build Solution</code>
# After the build completes, you should see an '''host\output''' directory in the build directory, containing either a Debug or Release subdirectory. These directories will contain generated executables, libraries, and will contain copies of the required DLLs.

== Verifying basic functionality ==
Open up a '''cmd.exe''' window and navigate to the output directory associated with your build:

<pre>
C:\Users\jon\Documents\projects\bladeRF\host\build\host\output\Debug>dir

10/19/2013  05:36 PM           122,880 bladeRF-cli.exe
10/19/2013  05:36 PM           139,776 bladeRF.dll

... Snipped out some other items ...

10/19/2013  05:35 PM            92,160 libusb-1.0.dll
10/19/2013  05:35 PM            55,808 pthreadVC2.dll

</pre>

Note the presence of the libusb-1.0.dll and pthreadVC2.dll in this directory. These are placed here so that the bladeRF-cli and other tests may be run from this directory.

From here, you can continue on with the [[Getting Started: Verifying Basic Device Operation]] wiki page. If you encounter any errors or warnings, please see the [[Troubleshooting]] guide.
