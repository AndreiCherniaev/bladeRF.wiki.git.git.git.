= Overview = 
There are currently two ways to have the FPGA automatically loaded when you begin using the bladeRF: a host-software based mechanism, and a firmware-based mechanism.

These "autoload" mechanisms alleviate the need to manually load the FPGA via the bladeRF-cli or using the <code>bladerf_load_fpga()</code> function.

= Host software-based =
As of version [https://github.com/Nuand/bladeRF/commit/14f515e4674674fb818172cde5feb9733cfaedcc 0.16.0], libbladeRF provides a mechanism to load an FPGA when a device handle is opened, if the FPGA is detected to not already be in a configured state.

<i>This approach is generally recommended over the firmware-based mechanism for users who will always be using the bladeRF device with a host machine.</i>

Upon opening a device handle, libbladeRF checks the device's FPGA size.  It then searchs for the corresponding FPGA bitfile (<code>hostedx40.rbf</code> or <code>hostedx115.rbf</code>) in one of the following locations. The order in which these locations are searched is from top to bottom.

Simply place (or symlink, for *nix users) the FPGA bitfile in one of these directories and it will be loaded when you first open the device handle.

== Linux or OSX ==
* The directory specified by the <code>BLADERF_SEARCH_DIR</code> environment variable (As of 2014-12-10)
* The current working directory (As of 2014-12-10)
* The directory containing the program being executed. (As of 2014-12-10)
* <code>your_home_directory/.config/Nuand/bladeRF/</code> (libbladeRF v0.16.0 +)
* <code>your_home_directory/.Nuand/bladeRF/</code> (libbladeRF v0.16.0 +)
* <code>/etc/Nuand/bladeRF/</code> (libbladeRF v0.16.0 +)
* <code>/usr/share/Nuand/bladeRF/</code> (libbladeRF v0.16.0 +)

The user's home directory is determined based $HOME, and then /etc/passwd (via getpwuid()) if $HOME is not valid.

== Windows ==
* The directory specified by the <code>BLADERF_SEARCH_DIR</code> environment variable (As of 2014-12-10)
* The current working directory (As of 2014-12-10)
* The directory containing the program being executed. (As of 2014-12-10)
* <code>C:\Users\<user name>\AppData\Roaming\Nuand\bladeRF</code> (via [http://msdn.microsoft.com/en-us/library/windows/desktop/dd378457%28v=vs.85%29.aspx FOLDERID_RoamingAppData]) (libbladeRF v0.16.0 +)
* The installation directory, via the <code>HKEY_LOCAL_MACHINE\Software\Nuand LLC\Path</code> registry key (libbladeRF v0.17.0 +)


= Firmware-based =

Another option is to write an FPGA-bitstream to the device's SPI flash.  When the firmware boots, it checks for the presence of FPGA metadata, and will begin to load the FPGA if a bitstream is present. 

This process is slower than the host-based mechanism mentioned above. However, this mechanism allows for "headless" (without a host PC) operation. It takes approximately 4 seconds to load an x40 image, and ~12 seconds to load an x115 image.

<b>IMPORTANT:</b> Be sure that the firmware autoload has completed before attempting to use the device (i.e., open a device handle)! When the FPGA is fully configured, LEDs 1-3 will be lit. As of FX3 firmware v1.8.0 and libbladeRF v1.0.0, `bladerf_open()` will block and wait until the device reports that its initialization (including autoloading) have completed. Therefore, using the latest available version alleviates this concern.

The FPGA may be written to the bladeRF's SPI flash via the CLI:
<pre>bladeRF-cli -L path/to/hostedx(size).rbf</pre>

To disable this autoload mechanism, erase the FPGA image and metadata. This can also be done via the CLI:
<pre>bladeRF-cli -L X</pre>

<b>IMPORTANT:</b> It is highly recommended that you disable FPGA autoload when prior to upgrading device firmware in order to avoid any potential conflicts.
