= Backing up and restoring calibration data =
Currently, the following information is stored in a user-modifiable "calibration region":
* FPGA size (40 or 115)
* [http://www.abracon.com/Oscillators/ASTX12_ASVTX12.pdf VCTCXO] (Voltage-controlled temperature-compensated oscillator) trim DAC value

Unless you're planning to replace the FPGA ('''not''' a recommended endeavor), there's no reason to mess with this field. The reason the FPGA size is here rather than in the OTP region is largely historic and pertains to debug usage during early development and testing.

The VCTCXO frequency will drift over time and due to environmental factors. Users will generally want to periodically recalibrate the associated trim DAC value, and write it back to the bladeRF.

== Backing up calibration data ==
From with the bladeRF-cli's interactive mode, the current calibration values can be viewed via the ''info'' command:

<pre>
bladeRF> info
  Serial #:                 00000000000000000000000000000000
  VCTCXO DAC calibration:   0xa0a8
  FPGA size:                40 KLE
  FPGA loaded:              no
  USB bus:                  4
  USB address:              2
  USB speed:                SuperSpeed
  Backend:                  libusb
  Instance:                 0
</pre>

Note the VCTXCO (trim) DAC calibration value above.

To back up this information to a file, which may later be restored through the bladeRF-cli program, the '''flash_backup''' command may be used.  Type <code>help flash_backup</code> to see the full help text for this command.

The general usage for saving calibration data is <code>flash_backup <output_file> cal</code>:

<pre>
bladeRF> flash_backup /home/jon/bladeRF-files/bladerf_cal_2014_03_18.bin cal
[INFO] Reading 0x00000100 bytes from address 0x00030000.
</pre>

This command will store the calibration data, along with some additional metadata, in the specified file. To view the associated metadata stored in the flash image, use the '''flash_image''' command.  This metadata may prove useful if you've accidentally renamed a file, or forgot which device (via serial number) is associated with the file.

<pre>
bladeRF> flash_image /home/jon/bladeRF-files/bladerf_cal_2014_03_18.bin

Checksum: d3ad936733b841cd10f0cb852d2a133e08cf080a60c4a607cca9908b75bd5e59
Image format version: 0.1.0
Timestamp: 2014-03-18 20:25:37
Serial #: 00000000000000000000000000000000
Image type: Calibration data
Address: 0x00030000
Length:  0x00000100
</pre>

== Restoring calibration data ==

=== From a file ===
If you've backed up calibration data to a file via the '''flash_backup''' command, you can use the '''flash_restore''' command to write this data back to the device.  Note that the serial number information in the metadata is strictly for informational purposes; it '''is not''' used to prevent data from being written to another device.

For more information about the '''flash_restore''' command, run <code>help flash_restore</code>.

<pre>
bladeRF> flash_restore /home/jon/bladeRF-files/bladerf_cal_2014_03_18.bin 
[INFO] Reading 0x00010000 bytes from address 0x00030000.
[INFO] Erasing 0x00010000 bytes starting at address 0x00030000.
[INFO] Writing 0x00010000 bytes to address 0x00030000.
</pre>

'''Note:''' A power cycle will be required for this change to take effect.

=== From scratch ===
This approach useful if you'd like to manually specify a VCTCXO trim value to store in the device.

The '''flash_init_cal''' command generates a calibration region of flash, and can either write it directly to a device, or to a file (for future use with the ''flash_restore'' command).

For more information about this command, run <code>help flash_init_cal</code> from the bladeRF-cli interactive mode.

For a bladeRF with a 40 kLE FPGA and a desired VCTCXO trim DAC value of 0x9015, you can write this information directly to the device via:
<pre>
bladeRF> flash_init_cal 40 0x9015
[INFO] Reading 0x00010000 bytes from address 0x00030000.
[INFO] Erasing 0x00010000 bytes starting at address 0x00030000.
[INFO] Writing 0x00010000 bytes to address 0x00030000.
</pre>

'''Note:''' A power cycle will be required for this change to take effect.

Alternatively, to write this data to a file:
<pre>
bladeRF> flash_init_cal 40 0x9015 /tmp/new_cal_data.bin
</pre>

== Wiped your calibration data? All is not lost! ==
If you've managed to wipe your calibration region and do not have the necessary tools to identify an appropriate VCTCXO trim value, email bladeRF@nuand.com with your serial number and a request to look up your factory-calibrated trim value.  (Please be patient!)

= Analyzing RX'd data =
Samples received via the bladeRF-cli, in either CSV or binary format, can easily be imported into tools such as [https://www.gnu.org/software/octave/ Octave], [http://www.mathworks.com/products/matlab/ MATLAB] or [http://www.baudline.com/ baudline].

== Octave/MATLAB == 
=== CSV data ===
In the CSV format, samples are stored in rows of: <code>I, Q</code>. 

To load these samples and reconstruct the complex signal:
<pre>
> samples = load("my_file.csv"); 
> samples_i = samples(:, 1);
> samples_q = samples(:, 2);
> signal = samples_i + j * samples_q;
> % Plot the magnitude of the signal in the time domain
> plot(abs(signal));
</pre>

=== Binary Data (SC16Q11 format) ===
Binary data in the SC16Q11 format is little-endian, sign-extended, and right-aligned. To load the samples and reconstruct the complex signal:
<pre>
> f = fopen("debug_trimmed.bin", "r", "ieee-le");
> samples = fread(f, Inf, "int16");
> samples_i = samples(1:2:end, :);
> samples_q = samples(2:2:end, :);
> % Plot the magnitude of the signal in the time domain
> plot(abs(signal));
</pre>

== baudline ==
Samples must be in a binary format to be used with baudline. This section assumes you've saved them to the binary SC16Q11 format, but other conversions are certainly possible.

=== Pre-recorded samples ===

Here's one way to view binary samples you've saved off using the bladeRF-cli program. Note that you can open a file using these settings from the command-line as well.

# Open baudline
# Right-click and select <b>Input -> Open File</b>
# Change <b>File Format</b> to <b>raw</b>
# Select your file and click <b>Open</b>
# Set the following parameters in the <b>raw parameters</b> dialog:
## Decompression: <b>OFF</b>
## Initial byte offset: <b>0</b>
## Sample Rate: <i>Sample rate you recorded the samples at</i>
## Channel: <b>2</b>, <b>quadrature</b>
## Decode Format: <b>16 bit linear</b>, <b>little endian</b>

=== Live Viewing ===

When getting your bearings in the bladeRF-cli, it's handy to be able to see some data while you're dialing in settings. Having baudline show the samples RX'd by the bladeRF-cli comes in quite handy.

# Create a fifo: <pre>$ mkfifo /tmp/sample_fifo</pre>
# Start up baudline, using the fifo as input. Adjust the <code>samplerate</code> parameter appropriately. <pre>./baudline -reset -format le16 -channels 2 -quadrature -samplerate 2000000 -stdin < /tmp/sample_fifo</pre>
# Start up the CLI and configure the device.
<pre>
bladeRF> set frequency 433.92M
bladeRF> set samplerate 2M
bladeRF> set bandwidth 1.5M
bladeRF> rx config file=/tmp/sample_fifo n=0
bladeRF> rx_start
</pre>

= Getting the most out of libtecla =
If you've built bladeRF-cli with support for [http://www.astro.caltech.edu/~mcs/tecla/index.html libtecla] (<i>highly</i> recommended), you'll have a number of great features available to you, including history, tab-completion (for filenames) and handy key bindings (including emacs and vi bindings).

See the [http://www.astro.caltech.edu/~mcs/tecla/tecla.html tecla man page] for detailed information about configuring and using libtelca-based programs.

To use vi or emacs key bindings, create a <code>~/.teclarc</code> file, and add the relevant line:
<pre>
edit-mode vi
</pre>
or
<pre>
edit-mode emacs
</pre>