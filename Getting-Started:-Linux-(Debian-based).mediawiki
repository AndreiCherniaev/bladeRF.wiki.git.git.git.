This guide describes the process of building and installing the bladeRF host libraries and tool for a Debian-based Linux system, and quickly getting a device up and running using pre-built firmware and FPGA images.

Although this guide was written based upon an Ubuntu 13.04 system, but the same general process applies to other recent Debian-based distributions. It is recommended that users of Ubuntu of 12.04 and earlier upgrade to a more recent version.


== Dependencies ==

Install dependent packages for the build:
<pre>sudo apt-get install libusb-1.0-0-dev libusb-1.0-0 build-essential cmake libncurses5-dev libtecla1 libtecla1-dev pkg-config git</pre>


'''NOTE:''' If your distribution provides libusb-1.0 packages earlier than 1.0.16, you may want to consider to manually installing libusb >= 1.0.16, either from source or from upstream packages.

While it is possible to use >= libusb-1.0.12, the bladeRF-flash utility will not be available due to hotplug support not being added until libusb-1.0.16. Versions earlier than libusb-1.0.12 are not supported.

You can check the libusb and libusb-dev versions installed on your system via:
<pre>
dpkg -s libusb-1.0-0 libusb-1.0-0-dev 
</pre>

'''(Optional)''' For Ubuntu users, the libusb-1.0.16 can be fetched from the upstream sources at http://packages.ubuntu.com/saucy/libusb-1.0-0 and http://packages.ubuntu.com/saucy/libusb-1.0-0-dev via:
<pre>wget http://de.archive.ubuntu.com/ubuntu/pool/main/libu/libusbx/libusb-1.0-0_1.0.16-3_amd64.deb && sudo dpkg -i libusb-1.0-0_1.0.16-3_amd64.deb
wget http://de.archive.ubuntu.com/ubuntu/pool/main/libu/libusbx/libusb-1.0-0-dev_1.0.16-3_amd64.deb && sudo dpkg -i libusb-1.0-0-dev_1.0.16-3_amd64.deb</pre>


== Building from source ==

=== Clone the bladeRF git repository ===

To obtain the latest source code for the first time, clone the Nuand git repository via:
<pre>
git clone https://github.com/Nuand/bladeRF.git ./bladeRF
cd ./bladeRF
ls  
</pre>


The directory contents will look something like this:
<pre>
CMakeLists.txt  COPYING          fx3_firmware  host
CONTRIBUTORS    firmware_common  hdl           README.md
</pre>

In the future, you can update the repository via:
<pre>
git pull
</pre>

=== Configure the build ===

First enter the directory containing the host source. Then create and enter a directory to perform the build in. By working out of the a 'build' directory, it's easy to later clean up, by simply removing 'build/'.

<pre>
cd host/
mkdir build
cd build
</pre>


Next, configure the build. In the below example, we:
* Set up a Debug build
* Enable the installation of udev rules, which grant members of the ''plugdev'' group read-write access to bladeRF devices.
* Specify that files should be installed into /usr/local
** You can install into a different location via the ''-DCMAKE_INSTALL_PREFIX=/some/desired/path'' option. Note that you'll need to need to configure binary and library search paths if you install elsewhere.

<pre>
cmake -DCMAKE_BUILD_TYPE=Debug -DINSTALL_UDEV_RULES=ON -DCMAKE_INSTALL_PREFIX=/opt/nuand/bladeRF/ ../
</pre>


Verify that your user is in the ''plugdev'' group by checking that you see ''plugdev'' in the output for the ''groups'' command.  If you do not, follow the instructions [http://oreilly.com/openbook/debian/book/ch07_01.html shown here] to add yourself to this group, first creating the group if it doesn't already exist. (Generally, this group already exists and desktop users in it.)

=== Perform the build and installation ===
<pre>
make
sudo make install
</pre>

=== Uninstall ===
Note that from this same directory, you can run ''sudo make uninstall'' to uninstall the files place on your sustem in the previous step.  

The ''install_manifest.txt'' file, created after running previous step successfully, lists all the files installed.  It is a good idea to back up this file if you plan on removing this build directory later.

=== Add bladeRF libraries to the search path ===
Create a new file, '/etc/ld.so.conf.d/bladeRF.conf'
<pre>
sudo vi /etc/ld.so.conf.d/bladeRF.conf
</pre>
Put the following line in it:
<pre>
/opt/nuand/bladeRF/lib/
</pre>

* Run the following to update library search paths:
<pre>sudo ldconfig</pre> 

== Detecting the device ==

From here on, it is assumed that the bladeRF tools are in your '''$PATH'''.

First, use the bladeRF-cli to probe for devices attached to the system.
<pre>bladeRF-cli -p</pre>

If a device is plugged in, you should see something similar to the following:
<pre>
    Backend:        libusb
    Serial:         f12ce1037830a1b27f3ceeba1f521413
    USB Bus:        4
    USB Address:    8
</pre>

If you do not see any device listed:
 * Verify that your user is in the ''plugdev'' group, as specified in '/etc/udev/rules.d/88-nuand.rules'
 * Double check ''dmesg'' and ''lsusb'' output
 ** The bladeRF's VID=1d50 and PID=6066
 ** If you see a Cypress device with VID=04b4 PID=00f3, then the bladeRF is running in the bootloader mode. No worries! Follow the instructions at: (Coming soon)
 * See the Troubleshooting page (Coming soon) before continuing.

Then load the FX3 firmware.  Note: you only need to do this once.. It's stored in flash, and survives power cycling.  The FPGA image, needs to be loaded every time.
<pre>bladeRF-cli -f <firmware.img></pre>
Load FPGA
<pre>bladeRF-cli -l <fpga.rbf></pre>

<strong>NOTE</strong>: For the FPGA image, there are 2 different sizes.  The 40kLE FPGA image will only work with the x40 and the 115kLE FPGA image will only work with the x115.  If you see the number `40` or `115` on the large Altera FPGA, you know which FPGA you have.  If you have doubts and the FPGA times out during loading, try the other image.

Recommended firmware and FPGA images to use<br>
FX3 Image: [http://nuand.com/fx3/latest.img]<br>
FPGA: [http://nuand.com/fpga]<br>
bleeding edge FPGA images see http://hoopycat.com/bladerf_builds/

The BladeRF at this point should be ready to go..  Now you just need something to talk to it..  GNURadio is a good candidate..

== Building GNURADIO from GIT ==

update: [[Build gnuradio-3.7.1 | Better gnuradio build guide ]]

The following below builds the latest release from git.. (The bleeding edge) And could be broken from time to time.

* Use gnuradio-build to pull and check dependencies
<pre>
cd ~/sandbox
mkdir gnuradio-builds
cd gnuradio-builds
wget http://www.sbrac.org/files/build-gnuradio
chmod +x ./build-gnuradio
./build-gnuradio -m prereqs gitfetch
</pre>
This takes a while...  check top, seems like it sits a long time on checking pre-requisites with no output.

* Compile GNU Radio
<pre>
cd ~/sandbox/gnuradio-builds/gnuradio/
mkdir build
cd build
cmake -DCMAKE_INSTALL_PREFIX=/opt/gnuradio-3.7.1git  ../ (based on git release, change as needed)
make
</pre>
( This is a large build and will take some time..  good time to take a break..)
<pre>sudo make install</pre>

* Add GNU Radio to linker path and executable path
create a new file call /etc/profile.d/gnuradio.sh
you will need sudo for this.
<pre>sudo vi /etc/profile.d/gnuradio.sh</pre>

Put the following into it:
<pre>#!/bin/bash
# add gnuradio and bladerf stuff to path
export PATH=$PATH:/opt/gnuradio-3.7.1git/bin:/opt/nuand/bladeRF/
# add gnuradio python libraries to python search path
if [ $PYTHONPATH ]; then
        export PYTHONPATH=$PYTHONPATH:/opt/gnuradio-3.7.1git/lib/python2.7/dist-packages
else
        export PYTHONPATH=/opt/gnuradio-3.7.1git/lib/python2.7/dist-packages
fi</pre>
'''note: update path above if you deviated from gnuradio-3.7.1git'''

'''note: If your on some non-debian based distro, you might need to replace "dist-packages" with "site-packages".'''

Again, with your favorite text editor, create a new file call /etc/ld.so.conf.d/gnuradio.conf
you will need sudo for this again.. (one line file)
<pre>sudo vi /etc/ld.so.conf.d/gnuradio.conf</pre>
Put this in the new file:
<pre>/opt/gnuradio-3.7.1git/lib</pre>
'''(note:) on some 64 bit systems, you might need a lib64 directory in this file as well?'''

* now update your library cache
<pre> sudo ldconfig -v | grep gnuradio</pre>

should see this or something similar.. 
<pre>/opt/gnuradio-3.7.1git/lib:
        libgnuradio-atsc-3.7.1git.so.0.0.0 -> libgnuradio-atsc.so
        libgnuradio-trellis-3.7.1git.so.0.0.0 -> libgnuradio-trellis.so
        libgnuradio-analog-3.7.1git.so.0.0.0 -> libgnuradio-analog.so
        libgnuradio-pager-3.7.1git.so.0.0.0 -> libgnuradio-pager.so
        libgnuradio-vocoder-3.7.1git.so.0.0.0 -> libgnuradio-vocoder.so
        libgnuradio-video-sdl-3.7.1git.so.0.0.0 -> libgnuradio-video-sdl.so
        libgnuradio-pmt-3.7.1git.so.0.0.0 -> libgnuradio-pmt.so
        libgnuradio-noaa-3.7.1git.so.0.0.0 -> libgnuradio-noaa.so
        libgnuradio-filter-3.7.1git.so.0.0.0 -> libgnuradio-filter.so
        libgnuradio-digital-3.7.1git.so.0.0.0 -> libgnuradio-digital.so
        libgnuradio-channels-3.7.1git.so.0.0.0 -> libgnuradio-channels.so
        libgnuradio-qtgui-3.7.1git.so.0.0.0 -> libgnuradio-qtgui.so
        libgnuradio-wxgui-3.7.1git.so.0.0.0 -> libgnuradio-wxgui.so
        libgnuradio-fec-3.7.1git.so.0.0.0 -> libgnuradio-fec.so
        libgnuradio-wavelet-3.7.1git.so.0.0.0 -> libgnuradio-wavelet.so
        libgnuradio-fcd-3.7.1git.so.0.0.0 -> libgnuradio-fcd.so
        libgnuradio-blocks-3.7.1git.so.0.0.0 -> libgnuradio-blocks.so
        libgnuradio-fft-3.7.1git.so.0.0.0 -> libgnuradio-fft.so
        libgnuradio-runtime-3.7.1git.so.0.0.0 -> libgnuradio-runtime.so
        libgnuradio-audio-3.7.1git.so.0.0.0 -> libgnuradio-audio.so
</pre>
If so..  All is good. 

you will now need to logout and log back in for the profile.d settings to take effect.
Once you have logged back in to your desktop, you should be able to run gnuradio-companion.
If you get a pop up about PYTHONPATH or LD_LIBRARY_PATH, check env to see if the python path or ldconfig returns the correct libraries.

== Build for gr-osmosdr ==
* Pull the git version of gr-osmosdr, build, install
<pre>$ cd ~/sandbox
$ git clone git://git.osmocom.org/gr-osmosdr ./gr-osmosdr
$ mkdir ~/sandbox/gr-osmosdr/build
$ cd ~/sandbox/gr-osmosdr/build
$ cmake -DLIBBLADERF_INCLUDE_DIRS=/opt/nuand/bladeRF/include/ -DLIBBLADERF_LIBRARIES=/opt/nuand/bladeRF/lib/ -DCMAKE_INSTALL_PREFIX=/opt/gnuradio-3.7.1git ../  (change as needed)
$ make
$ sudo make install
</pre>

== Simple test applications to verify device operation ==
*Using osmocom stand-alone applications:
Test Receive: (446 MHz)
<pre>osmocom_fft -a bladerf=0,fpga=/opt/nuand/bladeRF/fpga/hostedx40.rbf -s 8000000 -f 446000000</pre>
Test Transmit: (446 MHz + 25 KHz )
<pre>osmocom_siggen -a bladerf=0,fpga=/opt/nuand/bladeRF/fpga/hostedx40.rbf -s 8000000 -f 446000000 -g 4 --sine -x 25000</pre>

{ MORE TO COME }
